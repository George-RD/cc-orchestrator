# Event Schema Definitions for AI Collaboration Framework
# Defines event types for tracking agent workflows and task coordination

# Core Event Structure
core_event_schema:
  id: uuid
  timestamp: ISO8601
  type: string
  source: agent_name
  version: "1.0"
  correlation_id: uuid  # optional
  causation_id: uuid    # optional
  metadata:
    priority: low|normal|high|critical
    ttl: 3600            # seconds, optional
    retry_count: 0       # integer
  payload: {}           # object

# Event Type Definitions
event_types:
  
  # Task Lifecycle Events
  task_events:
    task_created:
      description: "Emitted when a new task is created"
      schema:
        type: task.created
        payload:
          task_id: uuid
          title: string
          description: string
          priority: low|normal|high|critical
          assigned_to: agent_name
          created_by: agent_name
          requirements: []
          deadline: null    # ISO8601, optional
    
    task_assigned:
      description: "Emitted when a task is assigned to an agent"
      schema:
        type: task.assigned
        payload:
          task_id: uuid
          assigned_to: agent_name
          assigned_by: agent_name
          previous_assignee: null  # agent_name, optional
          reason: string
    
    task_started:
      description: "Emitted when an agent begins working on a task"
      schema:
        type: task.started
        payload:
          task_id: uuid
          agent: agent_name
          estimated_completion: ISO8601
          approach: string
    
    task_progress:
      description: "Emitted to report task progress"
      schema:
        type: task.progress
        payload:
          task_id: uuid
          agent: agent_name
          percentage: 0-100
          completed_steps: []
          remaining_steps: []
          blockers: []        # optional
    
    task_completed:
      description: "Emitted when a task is finished"
      schema:
        type: task.completed
        payload:
          task_id: uuid
          agent: agent_name
          duration_ms: integer
          deliverables: []
          test_results: {}
          next_steps: []      # optional
    
    task_failed:
      description: "Emitted when a task cannot be completed"
      schema:
        type: task.failed
        payload:
          task_id: uuid
          agent: agent_name
          error_code: string
          error_message: string
          attempted_solutions: []
          recommendations: []

  # Code Events
  code_events:
    code_changed:
      description: "Emitted when code is modified"
      schema:
        type: code.changed
        payload:
          files: []
          change_type: create|update|delete
          author: agent_name
          description: string
          diff_stats:
            additions: integer
            deletions: integer
            files_changed: integer
    
    code_reviewed:
      description: "Emitted when code review is complete"
      schema:
        type: code.reviewed
        payload:
          review_id: uuid
          files: []
          reviewer: agent_name
          status: approved|changes_requested|rejected
          comments: []
          security_issues: []
          performance_issues: []
    
    code_merged:
      description: "Emitted when code is merged"
      schema:
        type: code.merged
        payload:
          merge_id: uuid
          source_branch: string
          target_branch: string
          files_changed: integer
          conflicts_resolved: boolean
          merged_by: agent_name

  # Test Events
  test_events:
    test_started:
      description: "Emitted when test execution begins"
      schema:
        type: test.started
        payload:
          test_run_id: uuid
          test_suite: string
          total_tests: integer
          agent: agent_name
    
    test_completed:
      description: "Emitted when test execution finishes"
      schema:
        type: test.completed
        payload:
          test_run_id: uuid
          test_suite: string
          passed: integer
          failed: integer
          skipped: integer
          duration_ms: integer
          coverage: float
          failed_tests: []

  # Build Events
  build_events:
    build_started:
      description: "Emitted when build process begins"
      schema:
        type: build.started
        payload:
          build_id: uuid
          trigger: manual|automated|scheduled
          triggered_by: agent_name
          environment: development|staging|production
    
    build_completed:
      description: "Emitted when build process finishes"
      schema:
        type: build.completed
        payload:
          build_id: uuid
          status: success|failure
          duration_ms: integer
          artifacts: []
          errors: []        # if failed

  # Error Events
  error_events:
    error_detected:
      description: "Emitted when an error is detected"
      schema:
        type: error.detected
        payload:
          error_id: uuid
          severity: low|medium|high|critical
          error_type: string
          error_message: string
          stack_trace: string
          affected_component: string
          detected_by: agent_name
    
    error_resolved:
      description: "Emitted when an error is fixed"
      schema:
        type: error.resolved
        payload:
          error_id: uuid
          resolution: string
          resolved_by: agent_name
          fix_type: code_change|configuration|rollback
          verification: string

  # System Events
  system_events:
    agent_online:
      description: "Emitted when an agent becomes available"
      schema:
        type: agent.online
        payload:
          agent: agent_name
          capabilities: []
          capacity: integer
          version: string
    
    agent_offline:
      description: "Emitted when an agent becomes unavailable"
      schema:
        type: agent.offline
        payload:
          agent: agent_name
          reason: planned|error|timeout
          expected_return: null  # ISO8601, optional
    
    agent_overloaded:
      description: "Emitted when an agent is at capacity"
      schema:
        type: agent.overloaded
        payload:
          agent: agent_name
          current_load: integer
          max_capacity: integer
          queued_tasks: integer

# Event Handlers Configuration
event_handlers:
  default_routing:
    - event_pattern: "task.*"
      handler: orchestrator
      persistence: required
      
    - event_pattern: "error.*"
      handler: error_recovery_system
      escalation: true
      
    - event_pattern: "consensus_needed"
      handler: human_review_queue
      priority: high

# Event Patterns for Framework
event_patterns:
  choreography:
    description: "Agents react to events independently"
    examples:
      - trigger: "api.created"
        subscribers:
          - frontend: "updates UI"
          - docs: "generates documentation"
          - qa: "creates test cases"
  
  orchestration:
    description: "Central orchestrator directs event flow"
    examples:
      - trigger: "feature.requested"
        flow:
          - step: 1
            action: "emit task.created to Backend"
          - step: 2
            wait_for: "task.completed from Backend"
          - step: 3
            action: "emit task.created to Frontend"

# Event Storage Configuration
persistence:
  storage_location: "/.orchestrator/events/logs/"
  retention_days: 90
  archive_location: "/.orchestrator/events/archive/"
  format: json_lines
  
# Best Practices
best_practices:
  event_design:
    - "Make events immutable"
    - "Use past tense (task.completed not task.complete)"
    - "Include enough context"
    - "Version events for backward compatibility"
    - "Keep payloads small"
  
  error_handling:
    - "Implement retry with exponential backoff"
    - "Use dead letter queues for failed events"
    - "Log all event processing errors"
  
  performance:
    - "Use event batching for high-volume events"
    - "Implement event filtering at source"
    - "Consider event aggregation for metrics"
    - "Use appropriate retention policies"